#
# Copyright (c) 2021 Krai Ltd.
#
# SPDX-License-Identifier: BSD-3-Clause.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#

###############################################################################
# PREABMLE STAGE
#
# In this stage, only perform steps that benefit the final image.
#
###############################################################################
#FROM qran-centos7:1.5.6
# NB: Setting FROM from ARGs only works starting with Docker 1.17. 
# (CentOS 7 comes with 1.13.)
ARG BASE_IMAGE
ARG SDK_VER
FROM $BASE_IMAGE:$SDK_VER AS preamble

# Use Python >= 3.7, as required by the MLPerf Power workflow.
ARG PYTHON_VER=3.8.11
# Use GCC >= 9, as MLPerf LoadGen requires C++14. (CentOS 7 comes with ancient GCC 4.)
ARG GCC_MAJOR_VER=10
# Fixed group id (recommended to be the same as that of 'qaic'). 
ARG GROUP_ID=1500
# Fixed user id.
ARG USER_ID=2000

ARG CK_QAIC_CHECKOUT=docker-update

# Use the Bash shell.
SHELL ["/bin/bash", "-c"]

# Allow stepping into the Bash shell interactively.
ENTRYPOINT ["/bin/bash", "-c"]

ENV LD_LIBRARY_PATH=/lib:/usr/lib:/usr/local/lib:$LD_LIBRARY_PATH
# Work out the subversions of Python.
RUN /bin/bash -l -c  \
 'echo export PYTHON_MAJOR_VER="$(echo ${PYTHON_VER} | cut -d '.' -f1)";\
  echo export PYTHON_MINOR_VER="$(echo ${PYTHON_VER} | cut -d '.' -f2)";\
  echo export CK_PYTHON="python${PYTHON_MAJOR_VER}.${PYTHON_MINOR_VER}"'

# Pull CK repositories.
RUN cd $(ck find repo:ck-qaic) && git checkout ${CK_QAIC_CHECKOUT}
RUN ck pull all

###############################################################################
# BUILDER STAGE
#
# In this stage, only perform steps that write into CK, CK_TOOLS, CK_REPOS,
# which can be simply copied into the final image.
#
###############################################################################
FROM preamble AS builder
ARG PYTHON_VER
ARG GCC_MAJOR_VER
ARG DEBUG_BUILD
ARG CK_QAIC_PCV

# Set platform scripts (ensuring that ECC is on).
RUN ck detect platform.os --platform_init_uoa=qaic

#-----------------------------------------------------------------------------#
# Step 1. Install explicit Python dependencies.
#-----------------------------------------------------------------------------#
RUN ck install package --tags=python-package,onnx --force_version=1.8.1 --quiet \
 && ck install package --tags=tool,coco --quiet

#-----------------------------------------------------------------------------#
# Step 2. Compile object-detection-qaic-loadgen.
#-----------------------------------------------------------------------------#
RUN ck compile program:object-detection-qaic-loadgen

#-----------------------------------------------------------------------------#
# Step 3. Download the dataset.
#-----------------------------------------------------------------------------#
RUN ck install package --tags=dataset,coco.2017,val

#-----------------------------------------------------------------------------#
# The steps above are common for SSD-ResNet34 and SSD-MobileNet-v1.
# The steps below are SSD-ResNet34 specific.
#-----------------------------------------------------------------------------#

#-----------------------------------------------------------------------------#
# Step 4. Preprocess the dataset for quantized SSD-ResNet34.
#-----------------------------------------------------------------------------#
RUN ck install package --dep_add_tags.lib-python-cv2=opencv-python-headless \
--tags=dataset,object-detection,for.ssd_resnet34.onnx.preprocessed.quantized,using-opencv,full \
--extra_tags=validation

#-----------------------------------------------------------------------------#
# Step 5. Prepare the SSD-ResNet34 workload.
#-----------------------------------------------------------------------------#
# Use a precalibrated profile.
ADD ssd-resnet34/bs.1 /home/krai/CK_REPOS/ck-qaic/profile/ssd-resnet34/bs.1
RUN echo "vdetected" |  ck detect soft:compiler.glow.profile \
--full_path=/home/krai/CK_REPOS/ck-qaic/profile/ssd-resnet34/bs.1/profile.yaml \
--extra_tags=detected,ssd_resnet34
# Remove NMS.
RUN ck install package --tags=model,onnx,mlperf,ssd-resnet34,no-nms
# Compile the workload for the 16-NSP PCIe server cards.
RUN if [[ "$CK_QAIC_PCV" != '' ]]; then ck install package --tags=model,qaic,ssd_resnet34,ssd_resnet34.pcie.16nsp,quantization.calibration --env._PERCENTILE_CALIBRATION_VALUE=99.$CK_QAIC_PCV --extra_tags=pcv.$CK_QAIC_PCV; ck install package --tags=model,qaic,ssd_resnet34,ssd_resnet34.pcie.16nsp.singlestream,quantization.calibration --env._PERCENTILE_CALIBRATION_VALUE=99.$CK_QAIC_PCV --extra_tags=pcv.$CK_QAIC_PCV; else ck install package --tags=model,qaic,ssd_resnet34,ssd_resnet34.pcie.16nsp; ck install package --tags=model,qaic,ssd_resnet34,ssd_resnet34.pcie.16nsp.singlestream; fi

#-----------------------------------------------------------------------------#
# Step 6. Remove 'heavy' items, but only the contents so not to disturb THE FORCE.
#-----------------------------------------------------------------------------#
RUN if [[ "${DEBUG_BUILD}" == "no" ]]; then rm -rf \
$(ck find repo:ctuning-programs)/* \
$(ck find repo:ck-crowdtuning-platforms)/* \
$(ck locate env --tags=mlperf,inference,source)/inference/.git \
$(ck locate env --tags=lib,protobuf-host)/src \
$(ck locate env --tags=tool,cmake)/cmake*/Bootstrap.cmk \
$(ck locate env --tags=tool,cmake)/cmake*/Tests \
$(ck locate env --tags=tool,cmake)/cmake*/Source \
$(ck locate env --tags=tool,cmake)/cmake*/Utilities \
$(ck locate env --tags=model,onnx,no-nms)/* \
$(ck locate env --tags=dataset,coco.2017,original)/annotations/*train* \
$(ck locate env --tags=dataset,coco.2017,original)/val2017/* && \
touch $(ck locate env --tags=dataset,coco.2017,original)/val2017/000000000139.jpg; fi

###############################################################################
# FINAL STAGE
#
# In this stage, simply copy CK, CK_TOOLS, CK_REPOS to the final image.
#
###############################################################################
FROM preamble AS final
COPY --from=builder /home/krai/CK       /home/krai/CK
COPY --from=builder /home/krai/CK_REPOS /home/krai/CK_REPOS
COPY --from=builder /home/krai/CK_TOOLS /home/krai/CK_TOOLS

#-----------------------------------------------------------------------------#
# Show the status of QAIC devices.
#-----------------------------------------------------------------------------#
CMD ["/opt/qti-aic/tools/qaic-util -q | grep Status"]
