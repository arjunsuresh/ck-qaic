###############################################################################
# PREABMLE STAGE
###############################################################################
FROM centos:7.9.2009 AS preamble

ARG PYTHON_VER=3.8.11
ARG GCC_MAJOR_VER=10
ARG CK_VER=2.5.8
ARG GROUP_ID=1500
ARG USER_ID=2000
ARG CK_QAIC_CHECKOUT=docker-update
ARG DEBUG_BUILD=no

# Use the US timezone by default.
ARG TIMEZONE=US/Central
RUN rm -rf /etc/localtime \
 && ln -s /usr/share/zoneinfo/${TIMEZONE} /etc/localtime \
 && ls -la /etc/localtime

LABEL maintainer="Anton Lokhmotov <anton@krai.ai>"

# Use the Bash shell.
SHELL ["/bin/bash", "-c"]

# Allow stepping into the Bash shell interactively.
ENTRYPOINT ["/bin/bash", "-c"]


RUN echo "min=1" >> /etc/yum.conf \
 && echo "timeout=1200" >> /etc/yum.conf

RUN yum update -y \
 && update-ca-trust force-enable \
 && yum install -y make which patch git wget zip unzip python python3 ca-certificates sudo pciutils pciutils-lib openssl-devel bzip2-devel libffi-devel numactl\
 && yum clean all

# NB: Must be two separate calls to yum install.
RUN yum install -y centos-release-scl \
  && yum install -y devtoolset-${GCC_MAJOR_VER}-gcc devtoolset-${GCC_MAJOR_VER}-gcc-c++
# Install Python >= 3.7.
RUN cd /usr/src \
 && wget https://www.python.org/ftp/python/${PYTHON_VER}/Python-${PYTHON_VER}.tgz \
 && tar xzf Python-${PYTHON_VER}.tgz \
 && rm Python-${PYTHON_VER}.tgz \
 && cd Python-${PYTHON_VER} \
 && scl enable devtoolset-${GCC_MAJOR_VER} "./configure --enable-optimizations --enable-shared && make altinstall" \
 && cd /usr/src \
 && rm -rf Python-${PYTHON_VER}*

###############################################################################
### BUILDER STAGE
###############################################################################
FROM preamble AS builder

RUN mkdir -p /tmp

COPY tmp/qaic-*.zip /tmp/
WORKDIR /tmp
RUN unzip qaic-apps-* && rm -f qaic-apps-*.zip && cd qaic-apps-* && ./install.sh && cd ../ && rm -rf qaic-apps-* \
&& unzip qaic-platform-*.zip && rm -f qaic-platform-*.zip && cd qaic-platform-* && cd x86_64/centos && sudo ./install.sh --container && cd ../../.. && rm -rf qaic-platform-*

###############################################################################
### FINAL STAGE
###############################################################################
FROM preamble AS final
ARG GROUP_ID=1500
ARG USER_ID=2000
ARG CK_VER=2.5.8
ARG PYTHON_VER=3.8.11
ARG CK_QAIC_CHECKOUT=docker-update


# Create a non-root user with a fixed group id and a fixed user id.
RUN groupadd -g ${GROUP_ID} kraig
RUN useradd -u ${USER_ID} -g kraig --create-home --shell /bin/bash krai
USER krai:kraig
WORKDIR /home/krai

# Work out the subversions of Python and place them into the Bash resource file.
RUN /bin/bash -l -c  \
 'echo export PYTHON_MAJOR_VER="$(echo ${PYTHON_VER} | cut -d '.' -f1)" >> /home/krai/.bashrc;\
  echo export PYTHON_MINOR_VER="$(echo ${PYTHON_VER} | cut -d '.' -f2)" >> /home/krai/.bashrc;\
  echo export PYTHON_PATCH_VER="$(echo ${PYTHON_VER} | cut -d '.' -f3)" >> /home/krai/.bashrc' \
 && source /home/krai/.bashrc \
 && /bin/bash -l -c \
 'echo export CK_PYTHON="python${PYTHON_MAJOR_VER}.${PYTHON_MINOR_VER}" >> /home/krai/.bashrc'

# Install Collective Knowledge (CK).
ENV CK_ROOT=/home/krai/CK \
    CK_REPOS=/home/krai/CK_REPOS \
    CK_TOOLS=/home/krai/CK_TOOLS \
    PATH=${CK_ROOT}/bin:/home/krai/.local/bin:${PATH} \
    LD_LIBRARY_PATH=/usr/local/lib:${LD_LIBRARY_PATH} \
    LIBRARY_PATH=/usr/local/lib:${LIBRARY_PATH} \
    CK_CC=gcc \
    GIT_USER="krai" \
    GIT_EMAIL="info@krai.ai" \
    LANG=C.UTF-8
RUN mkdir -p ${CK_ROOT} ${CK_REPOS} ${CK_TOOLS}
RUN git config --global user.name ${GIT_USER} && git config --global user.email ${GIT_EMAIL}
RUN git clone --branch V${CK_VER} https://github.com/ctuning/ck.git ${CK_ROOT}
RUN cd ${CK_ROOT} \
 && source /home/krai/.bashrc \
 && ${CK_PYTHON} setup.py install --user\
 && ${CK_PYTHON} -c "import ck.kernel as ck; print ('Collective Knowledge v%s' % ck.__version__)" \
 && chmod -R g+rx /home/krai/.local

# Explicitly create a CK experiment entry, a folder that will be mounted
# (with '--volume=<folder_for_results>:/home/krai/CK_REPOS/local/experiment').
# as a shared volume between the host and the container, and make it group-writable.
# For consistency, use the "canonical" uid from ck-analytics:module:experiment.
RUN ck create_entry --data_uoa=experiment --data_uid=bc0409fb61f0aa82 --path=${CK_REPOS}/local\
 && chmod -R g+ws ${CK_REPOS}/local/experiment
# Pull CK repositories (including ck-mlperf and ck-env).
RUN ck pull repo --url=https://github.com/krai/ck-qaic

#Detect Python interpreter, install the latest package installer (pip) and implicit dependencies.
RUN source /home/krai/.bashrc \
 && ck detect soft:compiler.python --full_path=$(which ${CK_PYTHON}) \
 && ${CK_PYTHON} -m pip install --user --ignore-installed pip setuptools \
 && ${CK_PYTHON} -m pip install --user wheel pyyaml testresources

# Install explicit dependencies.
RUN ck install package --tags=python-package,cython \
 && ck install package --tags=python-package,absl \
 && ck install package --tags=python-package,matplotlib --force_version=3.4.2 \
 && ck install package --tags=python-package,opencv-python-headless \
 && echo "latest" | ck install package --tags=python-package,numpy

COPY --from=builder /opt/qti-aic/ /opt/qti-aic/

ENV LD_LIBRARY_PATH=/opt/qti-aic/dev/lib/x86_64

ENV PATH "/usr/local/bin:${PATH}"

CMD ["/opt/qti-aic/tools/qaic-util -q | grep Status"]
